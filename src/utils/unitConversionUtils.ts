// src/utils/unitConversionUtils.ts - FIXED VERSION
"use client";

/**
 * Unit Conversion Utilities - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * Best Practice: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */

export type UnitType = "cs" | "dsp" | "ea" | "fractional";

export interface DualUnitData {
  csCount: number;
  pieceCount: number;
  csUnitType: UnitType | null;
  pieceUnitType: UnitType;
}

export interface UnitDisplayInfo {
  type: UnitType;
  label: string;
  shortLabel: string;
  description: string;
}

// ‚úÖ FIXED: Unit configuration - ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô
export const UNIT_CONFIG: Record<UnitType, UnitDisplayInfo> = {
  cs: {
    type: "cs",
    label: "‡∏•‡∏±‡∏á (Case/Carton)",
    shortLabel: "‡∏•‡∏±‡∏á",
    description: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà",
  },
  dsp: {
    type: "dsp",
    label: "‡πÅ‡∏û‡πá‡∏Ñ (Display Pack)",
    shortLabel: "‡πÅ‡∏û‡πá‡∏Ñ",
    description: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏û‡πá‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á",
  },
  ea: {
    type: "ea",
    label: "‡∏ä‡∏¥‡πâ‡∏ô (Each)",
    shortLabel: "‡∏ä‡∏¥‡πâ‡∏ô",
    description: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô",
  },
  fractional: {
    type: "fractional",
    label: "‡πÄ‡∏®‡∏© (‡∏ä‡∏¥‡πâ‡∏ô)",
    shortLabel: "‡πÄ‡∏®‡∏©",
    description: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
  },
};

/**
 * ‚úÖ FIXED: ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á - ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
export const getUnitDisplayLabel = (
  unitType: UnitType | null | undefined
): string => {
  if (!unitType) return "‡∏´‡∏ô‡πà‡∏ß‡∏¢";
  return UNIT_CONFIG[unitType]?.shortLabel || "‡∏´‡∏ô‡πà‡∏ß‡∏¢";
};

/**
 * ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏π‡πà - ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
 */
export const formatDualUnitDisplay = (data: DualUnitData): string => {
  const { csCount, pieceCount, csUnitType, pieceUnitType } = data;

  console.log("üìä formatDualUnitDisplay:", {
    csCount,
    pieceCount,
    csUnitType,
    pieceUnitType,
  });

  const csLabel = getUnitDisplayLabel(csUnitType);
  const pieceLabel = getUnitDisplayLabel(pieceUnitType);

  // ‚úÖ FIXED: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢
  if (csCount > 0 && pieceCount > 0) {
    return `${csCount} ${csLabel} + ${pieceCount} ${pieceLabel}`;
  } else if (csCount > 0) {
    return `${csCount} ${csLabel}`;
  } else if (pieceCount > 0) {
    return `${pieceCount} ${pieceLabel}`;
  } else {
    return "0";
  }
};

/**
 * ‚úÖ FIXED: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢
 */
export const validateDualUnitInput = (
  primaryValue: number,
  secondaryValue: number,
  primaryUnitType: UnitType,
  secondaryUnitType: UnitType
): { isValid: boolean; error?: string } => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö
  if (primaryValue < 0) {
    return {
      isValid: false,
      error: `${getUnitDisplayLabel(primaryUnitType)} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤`,
    };
  }

  if (secondaryValue < 0) {
    return {
      isValid: false,
      error: `${getUnitDisplayLabel(
        secondaryUnitType
      )} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤`,
    };
  }

  // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
  if (primaryValue === 0 && secondaryValue === 0) {
    return {
      isValid: false,
      error: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢",
    };
  }

  return { isValid: true };
};

/**
 * ‚úÖ FIXED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalEA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢)
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ backward compatibility ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 */
export const calculateTotalEA = (
  data: DualUnitData,
  packSize: number = 12
): number => {
  const { csCount, pieceCount, csUnitType, pieceUnitType } = data;
  let totalEA = 0;

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å csCount
  if (csUnitType === "cs") {
    // 1 CS = 12 DSP * packSize EA
    totalEA += csCount * 12 * packSize;
  } else if (csUnitType === "dsp") {
    // 1 DSP = packSize EA
    totalEA += csCount * packSize;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å pieceCount
  if (pieceUnitType === "dsp") {
    totalEA += pieceCount * packSize; // DSP = packSize EA
  } else {
    totalEA += pieceCount; // EA or fractional = 1:1
  }

  return totalEA;
};

/**
 * ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
export const createDualUnitData = (
  primaryValue: number,
  secondaryValue: number,
  primaryUnitType: UnitType,
  secondaryUnitType: UnitType
): DualUnitData => {
  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢
  let csCount = 0;
  let pieceCount = 0;
  let csUnitType: UnitType | null = null;
  let pieceUnitType: UnitType = "ea";

  // Primary unit mapping
  if (primaryUnitType === "cs" || primaryUnitType === "dsp") {
    csCount = primaryValue;
    csUnitType = primaryUnitType;
  }

  // Secondary unit mapping
  pieceCount = secondaryValue;
  pieceUnitType = secondaryUnitType;

  return {
    csCount,
    pieceCount,
    csUnitType,
    pieceUnitType,
  };
};

/**
 * ‚úÖ FIXED: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö
 */
export const compareDualUnits = (
  unit1: DualUnitData,
  unit2: DualUnitData,
  packSize: number = 12
): number => {
  const total1 = calculateTotalEA(unit1, packSize);
  const total2 = calculateTotalEA(unit2, packSize);
  return total1 - total2;
};

/**
 * ‚úÖ FIXED: ‡∏£‡∏ß‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏π‡πà‡∏™‡∏≠‡∏á‡∏ä‡∏∏‡∏î
 */
export const addDualUnits = (
  unit1: DualUnitData,
  unit2: DualUnitData
): DualUnitData => {
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
  if (
    unit1.csUnitType !== unit2.csUnitType ||
    unit1.pieceUnitType !== unit2.pieceUnitType
  ) {
    console.warn("‚ö†Ô∏è Warning: Adding incompatible unit types");
  }

  return {
    csCount: unit1.csCount + unit2.csCount,
    pieceCount: unit1.pieceCount + unit2.pieceCount,
    csUnitType: unit1.csUnitType || unit2.csUnitType,
    pieceUnitType: unit1.pieceUnitType,
  };
};

/**
 * ‚úÖ FIXED: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏π‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export const isDualUnitEmpty = (data: DualUnitData): boolean => {
  return data.csCount === 0 && data.pieceCount === 0;
};

/**
 * ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
 */
export const createDisplayDescription = (
  primaryUnitType: UnitType,
  secondaryUnitType: UnitType
): string => {
  const primaryLabel = getUnitDisplayLabel(primaryUnitType);
  const secondaryLabel = getUnitDisplayLabel(secondaryUnitType);

  return `‡∏Å‡∏£‡∏≠‡∏Å ${primaryLabel} ‡πÅ‡∏•‡∏∞ ${secondaryLabel} (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)`;
};

/**
 * ‚úÖ FIXED: Export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
export { type UnitType, type DualUnitData, type UnitDisplayInfo };

// ‚úÖ Example usage:
/*
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:

// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å: 5 ‡πÅ‡∏û‡πá‡∏Ñ + 1 ‡∏ä‡∏¥‡πâ‡∏ô
const userInput = createDualUnitData(5, 1, "dsp", "ea");
console.log(userInput);
// Output: { csCount: 5, pieceCount: 1, csUnitType: "dsp", pieceUnitType: "ea" }

// 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "5 ‡πÅ‡∏û‡πá‡∏Ñ + 1 ‡∏ä‡∏¥‡πâ‡∏ô" ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
const display = formatDualUnitDisplay(userInput);
console.log(display);
// Output: "5 ‡πÅ‡∏û‡πá‡∏Ñ + 1 ‡∏ä‡∏¥‡πâ‡∏ô"

// 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalEA ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)
const totalEA = calculateTotalEA(userInput, 12);
console.log(`Total EA: ${totalEA}`); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

// ‚ùå ‡πÑ‡∏°‡πà‡∏ó‡∏≥: ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// ‚ùå const converted = convertToSingleUnit(userInput); // ‡∏´‡πâ‡∏≤‡∏°!

// ‚úÖ ‡∏ó‡∏≥: ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
*/
