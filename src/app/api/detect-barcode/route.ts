// app/api/detect-barcode/route.ts
import { NextRequest, NextResponse } from "next/server";

const PYTHON_BACKEND_URL =
  process.env.PYTHON_BACKEND_URL || "http://localhost:8000";

interface PythonBackendResponse {
  success: boolean;
  detections?: any[];
  results?: any[];
  barcodes?: any[];
  confidence?: number;
  rotation_angle?: number;
  decode_method?: string;
  barcodes_found?: number;
  error?: string;
}

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ API route called");

    const formData = await request.formData();
    const imageFile = formData.get("image") as File;

    if (!imageFile) {
      console.log("‚ùå No image file found");
      return NextResponse.json(
        {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
        },
        { status: 400 }
      );
    }

    console.log(
      "üìÅ Image file received:",
      imageFile.name,
      imageFile.size,
      "bytes"
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend URL
    const backendUrl = PYTHON_BACKEND_URL;
    console.log("üîó Backend URL:", backendUrl);

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Python backend
      const pythonFormData = new FormData();
      pythonFormData.append("image", imageFile); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "file" ‡πÄ‡∏õ‡πá‡∏ô "image"

      console.log("üì§ Sending to Python backend...");

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Flask ‡∏´‡∏£‡∏∑‡∏≠ FastAPI
      // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Flask endpoint ‡∏Å‡πà‡∏≠‡∏ô
      let pythonResponse;
      let endpoint = "/api/detect-barcode"; // Flask endpoint

      try {
        console.log(`üîÑ Trying Flask endpoint: ${endpoint}`);
        pythonResponse = await fetch(`${backendUrl}${endpoint}`, {
          method: "POST",
          body: pythonFormData,
        });

        if (!pythonResponse.ok) {
          throw new Error(`Flask backend error: ${pythonResponse.status}`);
        }
      } catch (flaskError) {
        console.log("‚ö†Ô∏è Flask endpoint failed, trying FastAPI...");
        // ‡∏ñ‡πâ‡∏≤ Flask ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á FastAPI
        endpoint = "/scan-file"; // FastAPI endpoint
        pythonFormData.delete("image");
        pythonFormData.append("file", imageFile); // FastAPI ‡πÉ‡∏ä‡πâ "file"

        pythonResponse = await fetch(`${backendUrl}${endpoint}`, {
          method: "POST",
          body: pythonFormData,
        });

        if (!pythonResponse.ok) {
          const errorText = await pythonResponse.text();
          console.log("‚ùå Both backends failed:", errorText);
          throw new Error(`Both backends failed: ${pythonResponse.status}`);
        }
      }

      console.log("üì• Python backend response status:", pythonResponse.status);

      const result: PythonBackendResponse = await pythonResponse.json();
      console.log("‚úÖ Python backend result:", result);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö format ‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const response = {
        success: result.success || false,
        detections: result.detections || [],
        barcodes: result.results || result.barcodes || [],
        confidence: result.results?.[0]?.confidence || result.confidence || 0,
        rotation_angle:
          result.results?.[0]?.rotation_angle || result.rotation_angle || 0,
        decode_method:
          result.results?.[0]?.decode_method || result.decode_method || "",
        barcodes_found: result.barcodes_found || 0,
      };

      console.log("üì§ Sending response:", response);
      return NextResponse.json(response);
    } catch (backendError: unknown) {
      console.error("‚ùå Backend connection error:", backendError);

      const errorMessage =
        backendError instanceof Error
          ? backendError.message
          : "Unknown backend error";

      // ‡∏™‡πà‡∏á mock response ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
      return NextResponse.json({
        success: false,
        error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backend ‡πÑ‡∏î‡πâ: ${errorMessage}`,
        detections: [],
        barcodes: [],
        confidence: 0,
        rotation_angle: 0,
        decode_method: "error",
        mock: true,
      });
    }
  } catch (error: unknown) {
    console.error("üí• API Error:", error);

    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";

    return NextResponse.json(
      {
        success: false,
        error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${errorMessage}`,
        detections: [],
        barcodes: [],
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  console.log("üìù API health check");
  return NextResponse.json({
    message: "Barcode Detection API",
    status: "running",
    timestamp: new Date().toISOString(),
    endpoints: {
      POST: "/api/detect-barcode - Upload image for barcode detection",
    },
    backend_url: PYTHON_BACKEND_URL,
  });
}
