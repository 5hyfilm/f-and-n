// app/api/detect-barcode/route.js
import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    console.log("üöÄ API route called");

    const formData = await request.formData();
    const imageFile = formData.get("image");

    if (!imageFile) {
      console.log("‚ùå No image file found");
      return NextResponse.json(
        {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
        },
        { status: 400 }
      );
    }

    console.log(
      "üìÅ Image file received:",
      imageFile.name,
      imageFile.size,
      "bytes"
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend URL
    const backendUrl =
      process.env.PYTHON_BACKEND_URL || "http://localhost:8000";
    console.log("üîó Backend URL:", backendUrl);

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Python backend
      const pythonFormData = new FormData();
      pythonFormData.append("file", imageFile);

      console.log("üì§ Sending to Python backend...");

      // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Python backend
      const pythonResponse = await fetch(`${backendUrl}/scan-file`, {
        method: "POST",
        body: pythonFormData,
        headers: {
          // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á Content-Type ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ browser ‡∏ï‡∏±‡πâ‡∏á boundary ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        },
      });

      console.log("üì• Python backend response status:", pythonResponse.status);

      if (!pythonResponse.ok) {
        const errorText = await pythonResponse.text();
        console.log("‚ùå Python backend error:", errorText);
        throw new Error(
          `Python backend error: ${pythonResponse.status} - ${errorText}`
        );
      }

      const result = await pythonResponse.json();
      console.log("‚úÖ Python backend result:", result);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö format ‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const response = {
        success: result.success || false,
        detections: result.detections || [],
        barcodes: result.results || result.barcodes || [],
        confidence: result.results?.[0]?.confidence || result.confidence || 0,
        rotation_angle:
          result.results?.[0]?.rotation_angle || result.rotation_angle || 0,
        decode_method:
          result.results?.[0]?.decode_method || result.decode_method || "",
        barcodes_found: result.barcodes_found || 0,
      };

      console.log("üì§ Sending response:", response);
      return NextResponse.json(response);
    } catch (backendError) {
      console.error("‚ùå Backend connection error:", backendError);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backend ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á mock response
      return NextResponse.json({
        success: false,
        error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backend ‡πÑ‡∏î‡πâ: ${backendError.message}`,
        detections: [],
        barcodes: [],
        confidence: 0,
        rotation_angle: 0,
        decode_method: "error",
        mock: true,
      });
    }
  } catch (error) {
    console.error("üí• API Error:", error);
    return NextResponse.json(
      {
        success: false,
        error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${error.message}`,
        detections: [],
        barcodes: [],
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  console.log("üìù API health check");
  return NextResponse.json({
    message: "Barcode Detection API",
    status: "running",
    timestamp: new Date().toISOString(),
    endpoints: {
      POST: "/api/detect-barcode - Upload image for barcode detection",
    },
    backend_url: process.env.PYTHON_BACKEND_URL || "http://localhost:8000",
  });
}
